
/home/odyssey/os/diy-x86os/start/start/build/source/kernel/kernel.elf：     文件格式 elf32-i386
/home/odyssey/os/diy-x86os/start/start/build/source/kernel/kernel.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00100000

程序头：
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000034 memsz 0x000001d0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000001f  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  0010002c  0010002c  0000102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000190  00100040  00100040  00001034  2**5
                  ALLOC
  3 .debug_line   000000ac  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 00000105  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000157  00000000  00000000  000011e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000000ec  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000040  00000000  00000000  00001428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    000001a0  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY
 10 .rodata       0000000c  0010001f  0010001f  0000101f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_frame  00000034  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 init.c
00100040 l     O .bss	00000190 arr
0010000e g     F .text	00000011 kernel_init
00100000 g       .text	00000000 _start
00100030 g     O .data	00000004 str
0010002c g     O .data	00000004 a



Disassembly of section .text:

00100000 <_start>:
    .text
    .extern kernel_init
    .global _start
    # void start (boot_info_t * boot_info)
_start:
    push %ebp
  100000:	55                   	push   %ebp
    mov  %esp, %ebp
  100001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
  100003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax

    # kernel_init(boot_info)
    push %eax
  100006:	50                   	push   %eax
    call kernel_init
  100007:	e8 02 00 00 00       	call   10000e <kernel_init>
  10000c:	eb fe                	jmp    10000c <_start+0xc>

0010000e <kernel_init>:

static int arr[100];
int a = 10;
char * str = "hello world";

void kernel_init (boot_info_t* boot_info) {
  10000e:	55                   	push   %ebp
  10000f:	89 e5                	mov    %esp,%ebp
    str[1] = 'H';
  100011:	a1 30 00 10 00       	mov    0x100030,%eax
  100016:	83 c0 01             	add    $0x1,%eax
  100019:	c6 00 48             	movb   $0x48,(%eax)
  10001c:	90                   	nop
  10001d:	5d                   	pop    %ebp
  10001e:	c3                   	ret    
